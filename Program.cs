var fullInput =
@"............0.......................Bn...........v
.........0.....................8.........P.....D..
........M...........Q..0..8...h.......P...........
......M.A......c...................n..............
.....C..................A.........................
.M.AC....................................v........
........C..........W...w....J........Q...........y
.....i..............0.....nW.......w.Zv...6.......
........c....................A.........Pm........D
.............t.........x..........P....y....m.....
........................w...x.......F....Z........
...............Q......x6.......S......Z..O.......J
..............o.u........x....6.....r.D..M........
............c...o........u...Y....................
.........i............9..............g............
.....................d..WC..8.........J.g.........
...........X.c...............d...........m........
....................9.dR...........m......y.......
.............o.....9.......Y.6.OS...n..........F..
......i..................a..Q...r.Y.............U.
.....N......X......u..Ot...a......j......7........
..........q..X......t.....uH.......j.r..S.7.......
..........l...t....K.......................J......
...............9..............OB..................
...l.R...q..............g.......Y.7..V.......S....
..........................a.D............V........
......R.5...v.....W.............KB............U...
........Kp..F.N...........2.....B..............U..
..............................d..........h........
...L...NX...l...R...w..........F...........7......
..q.L......5.........................j............
.q.............5.......g..4.......................
............p...................s2..............Z.
......L...p...........................s..I........
........N..............................H..........
............5......................2.......hV.....
.............3..........1.......f.a...V...........
.....K..................................Hz....j...
.............k.b..G................I.....U........
.............1......................h.............
...........p...........L.....s....4T..............
.b..................G....s.T......I...............
............................H...........T4........
...............lk.................T...............
..i........................1........Iz............
..............b...........1........G..............
....b..............G..............................
........3......k............f..............4......
3.............k.2.....................z...........
...........3......................z..f............";

var smallInput =
@"......#....#
...#....0...
....#0....#.
..#....0....
....0....#..
.#....A.....
...#........
#......#....
........A...
.........A..
..........#.
..........#.";

var smallest = "";

var input = smallInput;
input = fullInput;
//input = smallest;
var timer = System.Diagnostics.Stopwatch.StartNew();

var result = 0;

var lines = input.Split(Environment.NewLine);
var height = lines.Count();
var width = lines[0].Length;

var grid = new List<Node>();

{
    var y = 0;
    foreach (var line in lines)
    {
        var x = 0;
        foreach (var item in line)
        {
            var value = item == '#' ? '.' : item;
            grid.Add(new Node { Value = value, X = x, Y = y });
            x++;
        }
        y++;
    }
}

foreach (var antennaGrp in grid.Where(x => x.Value != '.').GroupBy(x => x.Value))
{
    foreach (var antenna in antennaGrp)
    {
        foreach (var otherAntenna in antennaGrp)
        {
            if (antenna == otherAntenna) { continue; }
            var xDiff = antenna.X - otherAntenna.X;
            var yDiff = antenna.Y - otherAntenna.Y;
            var antinode1 = grid.SingleOrDefault(n => n.X == (antenna.X + xDiff) && n.Y == (antenna.Y + yDiff));
            if (antinode1 != null)
            {
                antinode1.IsAntiNode = true;
            }

            //var antinode2 = grid.SingleOrDefault(n => n.X == (otherAntenna.X - xDiff) && n.Y == (otherAntenna.Y - yDiff));
            //if (antinode2 != null)
            //{
            //    antinode2.IsAntiNode = true;
            //}
        }
    }
}

result = grid.Count(x => x.IsAntiNode);

timer.Stop();
Console.WriteLine(result);
Console.WriteLine(timer.ElapsedMilliseconds + "ms");
Console.ReadLine();

class Node
{
    public int X { get; set; }
    public int Y { get; set; }
    public char Value { get; set; }
    public bool IsAntiNode { get; set; }
    public override string ToString() => Value.ToString();
}